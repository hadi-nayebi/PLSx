[
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy.engine.base",
        "description": "sqlalchemy.engine.base",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine.base",
        "documentation": {}
    },
    {
        "label": "SqliteDB",
        "importPath": "PLSx.database.sqlitedb",
        "description": "PLSx.database.sqlitedb",
        "isExtraImport": true,
        "detail": "PLSx.database.sqlitedb",
        "documentation": {}
    },
    {
        "label": "SqliteDB",
        "importPath": "PLSx.database.sqlitedb",
        "description": "PLSx.database.sqlitedb",
        "isExtraImport": true,
        "detail": "PLSx.database.sqlitedb",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "union",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "DataFrame",
        "importPath": "pandas",
        "description": "pandas",
        "isExtraImport": true,
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "PLSx.database.database",
        "description": "PLSx.database.database",
        "isExtraImport": true,
        "detail": "PLSx.database.database",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Tensor",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "cuda",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "device",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "cat",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "device",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "tensor",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "importPath": "PLSx.dataloader.dataloader",
        "description": "PLSx.dataloader.dataloader",
        "isExtraImport": true,
        "detail": "PLSx.dataloader.dataloader",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "array",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "arange",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "array",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ndarray",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "read_fasta",
        "importPath": "PLSx.dataloader.utils",
        "description": "PLSx.dataloader.utils",
        "isExtraImport": true,
        "detail": "PLSx.dataloader.utils",
        "documentation": {}
    },
    {
        "label": "read_json",
        "importPath": "PLSx.dataloader.utils",
        "description": "PLSx.dataloader.utils",
        "isExtraImport": true,
        "detail": "PLSx.dataloader.utils",
        "documentation": {}
    },
    {
        "label": "write_fasta",
        "importPath": "PLSx.dataloader.utils",
        "description": "PLSx.dataloader.utils",
        "isExtraImport": true,
        "detail": "PLSx.dataloader.utils",
        "documentation": {}
    },
    {
        "label": "write_json",
        "importPath": "PLSx.dataloader.utils",
        "description": "PLSx.dataloader.utils",
        "isExtraImport": true,
        "detail": "PLSx.dataloader.utils",
        "documentation": {}
    },
    {
        "label": "read_json",
        "importPath": "PLSx.dataloader.utils",
        "description": "PLSx.dataloader.utils",
        "isExtraImport": true,
        "detail": "PLSx.dataloader.utils",
        "documentation": {}
    },
    {
        "label": "Num",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "numpy.random",
        "description": "numpy.random",
        "isExtraImport": true,
        "detail": "numpy.random",
        "documentation": {}
    },
    {
        "label": "permutation",
        "importPath": "numpy.random",
        "description": "numpy.random",
        "isExtraImport": true,
        "detail": "numpy.random",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Entrez",
        "importPath": "Bio",
        "description": "Bio",
        "isExtraImport": true,
        "detail": "Bio",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "TestXXX",
        "kind": 6,
        "importPath": "PLSx.data_utils.test.test_template",
        "description": "PLSx.data_utils.test.test_template",
        "peekOfCode": "class TestXXX(TestCase):\n    \"\"\"Test items for XXX class.\"\"\"\n    pass\nif __name__ == \"__main__\":\n    unittest_main()",
        "detail": "PLSx.data_utils.test.test_template",
        "documentation": {}
    },
    {
        "label": "TestSqliteDB",
        "kind": 6,
        "importPath": "PLSx.database.test.test_sqlitedb",
        "description": "PLSx.database.test.test_sqlitedb",
        "peekOfCode": "class TestSqliteDB(TestCase):\n    \"\"\"Test items for SqliteDB class.\"\"\"\n    def test_create(self):\n        \"\"\"Test create.\"\"\"\n        db = SqliteDB()\n        db.create(\"test\")\n        self.assertIsInstance(db.engine, Engine)\n        self.assertEqual(db.table_name, \"test\")\n        db.engine.dispose()\nif __name__ == \"__main__\":",
        "detail": "PLSx.database.test.test_sqlitedb",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "PLSx.database.database",
        "description": "PLSx.database.database",
        "peekOfCode": "class Database(ABC):\n    \"\"\"Abstract base class for a database object that will store the data streamed from Pipeline objects\n    Args:\n        ABC (_type_): ABC base class\n    \"\"\"\n    def create(self, name: str) -> None:\n        \"\"\"Create a new database.\n        Args:\n            name (_type_): Name of the database\n        Returns:",
        "detail": "PLSx.database.database",
        "documentation": {}
    },
    {
        "label": "SqliteDB",
        "kind": 6,
        "importPath": "PLSx.database.sqlitedb",
        "description": "PLSx.database.sqlitedb",
        "peekOfCode": "class SqliteDB(Database):\n    \"\"\"SqliteDB subclass of Database abstract class\n    Args:\n        Database (ABC): abstract base class for database objects\n    \"\"\"\n    root = Path(dirname(__file__)).parent.parent\n    def __init__(self):\n        super().__init__()\n        self.engine = None\n        self.table_name = None",
        "detail": "PLSx.database.sqlitedb",
        "documentation": {}
    },
    {
        "label": "TestDataLoader",
        "kind": 6,
        "importPath": "PLSx.dataloader.test.test_dataloader",
        "description": "PLSx.dataloader.test.test_dataloader",
        "peekOfCode": "class TestDataLoader(TestCase):\n    \"\"\"Test items for DataLoader class.\"\"\"\n    @classmethod\n    def setUpClass(cls) -> None:\n        \"\"\"Set up class.\"\"\"\n        cls.dl = None\n        cls.device = device(\"cuda:0\" if cuda.is_available() else \"cpu\")\n        cls.DATASET_CL = \"cl_100\"\n        cls.DATASET_SS = \"ss_100\"\n        cls.DATASET_CLSS = \"clss_20\"",
        "detail": "PLSx.dataloader.test.test_dataloader",
        "documentation": {}
    },
    {
        "label": "TestUtils",
        "kind": 6,
        "importPath": "PLSx.dataloader.test.test_utils",
        "description": "PLSx.dataloader.test.test_utils",
        "peekOfCode": "class TestUtils(TestCase):\n    \"\"\"Test items for DataLoader utils.\"\"\"\n    root = Path(dirname(__file__)).parent.parent\n    def test_read_fasta(self):\n        \"\"\"Test read_fasta.\"\"\"\n        filename = self.root / \"test_data\" / \"test_read_fasta.fasta\"\n        data = read_fasta(filename)\n        self.assertEqual(len(data), 5)\n        self.assertIsInstance(data, dict)\n    def test_write_fasta(self):",
        "detail": "PLSx.dataloader.test.test_utils",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "kind": 6,
        "importPath": "PLSx.dataloader.dataloader",
        "description": "PLSx.dataloader.dataloader",
        "peekOfCode": "class DataLoader(object):\n    \"\"\"Dataloader class maintains the training and testing data for the model.\"\"\"\n    root = Path(dirname(__file__)).parent.parent\n    def __init__(self) -> None:\n        \"\"\"Initialize the DataLoader.\"\"\"\n        self._train_data = None\n        self._test_data = None\n        self.test_data_keys = None\n        self.test_data_transform = False\n        self.train_data_transform = False",
        "detail": "PLSx.dataloader.dataloader",
        "documentation": {}
    },
    {
        "label": "NumpyEncoder",
        "kind": 6,
        "importPath": "PLSx.dataloader.utils",
        "description": "PLSx.dataloader.utils",
        "peekOfCode": "class NumpyEncoder(json.JSONEncoder):\n    \"\"\"Encoder for numpy arrays.\"\"\"\n    def default(self, obj) -> Any:\n        if isinstance(obj, ndarray):\n            return obj.tolist()\n        return json.JSONEncoder.default(self, obj)  # no test coverage for this function\ndef read_fasta(filename: Union[Path, str]) -> dict[str, str]:\n    \"\"\"Read fasta files and return a dict. (.fasta)\"\"\"\n    data_dict = {}\n    assert str(filename).endswith(\".fasta\"), \"File format must be .fasta\"",
        "detail": "PLSx.dataloader.utils",
        "documentation": {}
    },
    {
        "label": "read_fasta",
        "kind": 2,
        "importPath": "PLSx.dataloader.utils",
        "description": "PLSx.dataloader.utils",
        "peekOfCode": "def read_fasta(filename: Union[Path, str]) -> dict[str, str]:\n    \"\"\"Read fasta files and return a dict. (.fasta)\"\"\"\n    data_dict = {}\n    assert str(filename).endswith(\".fasta\"), \"File format must be .fasta\"\n    with open(filename, \"r\") as file:\n        for line in file.readlines():\n            if line.startswith(\">\"):\n                key = line.strip()[1:]\n                data_dict[key] = \"\"\n            else:",
        "detail": "PLSx.dataloader.utils",
        "documentation": {}
    },
    {
        "label": "write_fasta",
        "kind": 2,
        "importPath": "PLSx.dataloader.utils",
        "description": "PLSx.dataloader.utils",
        "peekOfCode": "def write_fasta(data: dict, filename: Union[Path, str], line_size: int = 60) -> None:\n    \"\"\"Write fasta files from a dict. (.fasta)\"\"\"\n    assert str(filename).endswith(\".fasta\"), \"File format must be .fasta\"\n    with open(filename, \"w\") as file:\n        for key, item in data.items():\n            file.write(f\">{key}\\n\")\n            seq = item[:]\n            while len(seq) > line_size:\n                file.write(f\"{seq[:line_size]}\\n\")\n                seq = seq[line_size:]",
        "detail": "PLSx.dataloader.utils",
        "documentation": {}
    },
    {
        "label": "read_json",
        "kind": 2,
        "importPath": "PLSx.dataloader.utils",
        "description": "PLSx.dataloader.utils",
        "peekOfCode": "def read_json(filename: Union[Path, str]) -> dict[str, Any]:\n    \"\"\"Read json files and return a dict. (.json, .json.gz)\"\"\"\n    if isinstance(filename, Path):\n        filename = str(filename)\n    if filename.endswith(\".json.gz\"):\n        with gzip.open(filename, \"r\") as file:\n            json_bytes = file.read()\n            json_str = json_bytes.decode(\"utf-8\")\n            return json.loads(json_str)\n    elif filename.endswith(\".json\"):",
        "detail": "PLSx.dataloader.utils",
        "documentation": {}
    },
    {
        "label": "write_json",
        "kind": 2,
        "importPath": "PLSx.dataloader.utils",
        "description": "PLSx.dataloader.utils",
        "peekOfCode": "def write_json(\n    data: Union[dict, str], filename: Union[Path, str], encoding=None, pretty=False\n) -> None:\n    \"\"\"Write json file from a dict, encoding numpy arrays. (.json, .json.gz)\"\"\"\n    if isinstance(filename, Path):\n        filename = str(filename)\n    # stting up the encoding\n    if encoding is not None:\n        if encoding == \"numpy\":\n            encoding = NumpyEncoder",
        "detail": "PLSx.dataloader.utils",
        "documentation": {}
    },
    {
        "label": "TestXXX",
        "kind": 6,
        "importPath": "PLSx.utils.test.test_template",
        "description": "PLSx.utils.test.test_template",
        "peekOfCode": "class TestXXX(TestCase):\n    \"\"\"Test items for XXX class.\"\"\"\n    pass\nif __name__ == \"__main__\":\n    unittest_main()",
        "detail": "PLSx.utils.test.test_template",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.asgi",
        "description": "PLSxView.PLSxView.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "PLSxView.PLSxView.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-x5mh@i71sq4@vcbvaqt2+kkx-ybb8fhgwz)0!3dp1t0psdkx&6'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-x5mh@i71sq4@vcbvaqt2+kkx-ybb8fhgwz)0!3dp1t0psdkx&6'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'PLSxView.urls'",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "ROOT_URLCONF = 'PLSxView.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "WSGI_APPLICATION = 'PLSxView.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.settings",
        "description": "PLSxView.PLSxView.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "PLSxView.PLSxView.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.urls",
        "description": "PLSxView.PLSxView.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n]",
        "detail": "PLSxView.PLSxView.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "PLSxView.PLSxView.wsgi",
        "description": "PLSxView.PLSxView.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "PLSxView.PLSxView.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "PLSxView.manage",
        "description": "PLSxView.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'PLSxView.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "PLSxView.manage",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "archive.load_uniprot",
        "description": "archive.load_uniprot",
        "peekOfCode": "root = Path(dirname(__file__)).parent.parent\n# define a local sqilte database\ndb = SqliteDB()\ndb.create(\"uniprot\")\n# list of species with full genome sequences, downloaded from NCBI\nspecies = pd.read_csv(root / \"data\" / \"genomes.csv\")\n# print(species[\"Size(Mb)\"].sum())\nEntrez.email = \"nayebiga@msu.edu\"\nfor name in species[\"#Organism Name\"]:\n    eSearch = Entrez.esearch(db=\"genome\", term=\"name\")",
        "detail": "archive.load_uniprot",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "archive.load_uniprot",
        "description": "archive.load_uniprot",
        "peekOfCode": "db = SqliteDB()\ndb.create(\"uniprot\")\n# list of species with full genome sequences, downloaded from NCBI\nspecies = pd.read_csv(root / \"data\" / \"genomes.csv\")\n# print(species[\"Size(Mb)\"].sum())\nEntrez.email = \"nayebiga@msu.edu\"\nfor name in species[\"#Organism Name\"]:\n    eSearch = Entrez.esearch(db=\"genome\", term=\"name\")\n    res = Entrez.read(eSearch)\n    for k in res:",
        "detail": "archive.load_uniprot",
        "documentation": {}
    },
    {
        "label": "species",
        "kind": 5,
        "importPath": "archive.load_uniprot",
        "description": "archive.load_uniprot",
        "peekOfCode": "species = pd.read_csv(root / \"data\" / \"genomes.csv\")\n# print(species[\"Size(Mb)\"].sum())\nEntrez.email = \"nayebiga@msu.edu\"\nfor name in species[\"#Organism Name\"]:\n    eSearch = Entrez.esearch(db=\"genome\", term=\"name\")\n    res = Entrez.read(eSearch)\n    for k in res:\n        print(k, \"=\", res[k])\n    break",
        "detail": "archive.load_uniprot",
        "documentation": {}
    },
    {
        "label": "Entrez.email",
        "kind": 5,
        "importPath": "archive.load_uniprot",
        "description": "archive.load_uniprot",
        "peekOfCode": "Entrez.email = \"nayebiga@msu.edu\"\nfor name in species[\"#Organism Name\"]:\n    eSearch = Entrez.esearch(db=\"genome\", term=\"name\")\n    res = Entrez.read(eSearch)\n    for k in res:\n        print(k, \"=\", res[k])\n    break",
        "detail": "archive.load_uniprot",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "__version__ = \"0.1.0\"\n# from Plsx 0.1.0\n# run this command to update module\n# pip install -e .\n# imports\nfrom setuptools import find_packages, setup\nsetup(name=\"PLSx\", version=__version__, packages=find_packages())",
        "detail": "setup",
        "documentation": {}
    }
]